// Configuration of the heating controller.

// Job scheduler:
scheduler =
{
  // Maximum time (in sec) to wait between polling the
  // list of scheduled jobs (will be less if there is an upcoming job).
  idle_time = IDLE-SEC;
};


// Known hosts we ping in case of a "query full state" request (to check,
// whether local network and internet is up and running).
network =
{
  local = {
    DisplayNameOfLocalHost1 = "host1";
  };
  internet = {
    OpenWeatherMap = "openweathermap.org";
    DNS = "8.8.8.8";
  };
};


// Configuration for our heating controller - the one who guards the access
// to the zigbee gateway.
heating =
{
  // Maximum time (in sec) to wait between updating the heating/querying the temperature
  idle_time = IDLE-SEC;

  // If there is an error, the controller will retry several times.
  // This number defines how many retries it should wait before broadcasting
  // the error to me, e.g. via telegram.
  // So the max. time between error and broadcast would be idle_time * X:
  num_consecutive_errors_before_broadcast = X;

  // Number of seconds to wait before computing the temperature trend while
  // heating (used to issue a warning if the reference room temperature
  // does not increase).
  temperature_trend_waiting_time = WAITING-SEC;

  // A trend (increase/decrease) will be recognized if abs(delta_temperature) >= threshold
  temperature_trend_threshold = DELTA-TEMP-THRESH;

  // Subsequent warnings about temperature trend will be skipped for
  // this amount of seconds
  temperature_trend_mute_time = MUTE-WARN-SEC;
};


// Configuration for our district heating system
district_heating =
{
  // Removed on purpose
};


// Configuration for the 433.92 MHz wrapper.
lpd433 = 
{
  // Removed on purpose
};

// Configuration for the ZigBee/RaspBee wrapper.
raspbee =
{
  deconz = {
    // Removed on purpose
  };

  temperature = {
    // We need to know the deCONZ names of our temperature sensors:
    sensor_names = {
      kitchen = "SENSOR1";
      roomX = "SENSOR2";
    };

    // Sensor aliases for display/status reports, etc.
    display_names = {
      kitchen = "Kitchen";
      roomX = "Living Room";
    };

    // Abbreviations for table display (i.e. telegram bot: /temp command)
    abbreviations = {
      kitchen = "K";
      roomX = "LR";
    };

    // When keeping a constant temperature, we can only take a single reference temperature
    // reading. This sensor, however, may be unreachable/offline - thus, process the known
    // sensors in the following order:    
    preferred_heating_reference = [
      "SENSOR2",
      "SENSOR1"
    ];
  };
};

// Configuration of our temperature logger
temperature_log = {
  // Where to store the log
  log_file = "/var/log/home-automation/temperature.log";

  // Rotate log files on sunday...
  log_rotation_when = "w6"; 

  // ... each week
  log_rotation_interval = 1;

  // Delete logs older than X intervals (here 12 weeks)
  log_rotation_backup_count = 12;

  // Poll sensors every X minutes
  update_interval_minutes = 5;

  // Label used for display
  job_label = "Temperature Trend";
};


// Webservice to provide data/access to any web client (e.g. the e-ink display).
server = 
{
  // Set to empty string to listen on all available interfaces, 
  // otherwise provide a specific interface (e.g. 127.0.0.1)
  host = "";

  // On which port should we listen?
  port = PORT-NUM;
};

